import inspect


class Patterns():
    # Patterns based on https://www.conwaylife.com/wiki/Category:Patterns
    blinker = [[0, 1, 0],
               [0, 1, 0],
               [0, 1, 0]]

    toad = [[0, 1, 1, 1],
            [1, 1, 1, 0]]

    beacon = [[1, 1, 0, 0],
              [1, 1, 0, 0],
              [0, 0, 1, 1],
              [0, 0, 1, 1]]

    glider = [[0, 0, 1],
              [1, 0, 1],
              [0, 1, 1]]

    lwss = [[0, 1, 0, 0, 1],
            [1, 0, 0, 0, 1],
            [1, 0, 0, 1, 0],
            [1, 1, 1, 1, 0]]

    pulsar = [[0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]]

    gosper_glider_gun = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         1,
         1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         1,
         1],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0]]

    r_pentomino = [[0, 1, 1],
                   [1, 1, 0],
                   [0, 1, 0]]

    die_hard = [[0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 1, 1, 1]]

    unbounded = [[1, 1, 1, 0, 1],
                 [1, 0, 0, 0, 0],
                 [0, 0, 0, 1, 1],
                 [0, 1, 1, 0, 1],
                 [1, 0, 1, 0, 1]]

    @classmethod
    def get_pattern(cls, name):
        """
        Returns a pattern by its name or an empty list if the pattern doesn't exist
        """
        name = name.lower().strip().replace(" ", "_")
        if name in cls.__dict__:
            return cls.__dict__[f'{name}']
        return []

    @staticmethod
    def get_all_pattern_names():
        attributes = []
        for att in inspect.getmembers(Patterns, lambda a: not (inspect.isroutine(a))):
            if not (att[0].startswith('__') and att[0].endswith('__')):
                attributes.append(att[0])
        return [attribute.replace('_', " ") for attribute in attributes]
